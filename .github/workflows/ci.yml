name: CI/CD

on:
  push:
    branches: [main, develop]
    tags-ignore: ['*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  install:
    name: Install dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'latest'
          cache: 'npm'
      - run: npm ci --prefer-offline

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'latest'
          cache: 'npm'
      - run: npm ci --prefer-offline    # <-- important
      - run: npm run lint

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'latest'
          cache: 'npm'
      - run: npm ci --prefer-offline   # <-- indispensable
      - run: npm test

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'latest'
          cache: 'npm'
      - run: echo "Hello Integration !"

  e2e-test:
    name: E2E Tests (only on PR)
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    needs: integration-test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'latest'
          cache: 'npm'
      - run: echo "Hello E2E !"

  release:
    name: Release (manual)
    runs-on: ubuntu-latest
    needs: [unit-test, integration-test]
    if: "${{ github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, 'chore: release') }}"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Use a personal access token (PAT) stored in repository secrets so the workflow
          # can push tags and create releases. Create a secret named `RELEASE_TOKEN`
          # with repo scope (or appropriate permissions) and add it in the repo settings.
          token: ${{ secrets.RELEASE_TOKEN }}
          persist-credentials: true
      - uses: actions/setup-node@v4
        with:
          node-version: 'latest'
      - name: Configure Git
        run: |
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git config user.name "${{ github.actor }}"
      - name: Release
        run: npx --yes release-it --ci
        env:
          # Use the PAT so git push and tag operations are permitted. Ensure you add
          # `RELEASE_TOKEN` to repository secrets (repo-level) before running this workflow.
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
